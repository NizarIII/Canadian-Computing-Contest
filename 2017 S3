//Nizar I.
//February 22, 2017
//CCC 2017 S3

import java.io.*;
import java.util.*;
public class 2017S3 {

	 public static List<Integer> addList (String[] tmp, int N, List<Integer> L) throws IOException {
	     BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
		 	tmp = in.readLine().split(" ");
	        for (int i=0; i<N;i++)
	            L.add(Integer.parseInt(tmp[i]));
	        return L;
	    }
	    @SuppressWarnings("unchecked")
		public static List<ArrayList<Integer>> Boards (ArrayList<Integer> boards, ArrayList<ArrayList<Integer>> H, List<Integer> L) {
	    	 for (int i=0;i<L.size()-2;i++) {
	 	        int j=i+1;
	 	            while (j<L.size()) {
	 	                boards.add(L.get(i));
	 	                boards.add(L.get(j));
	 	                boards.add(L.get(i)+L.get(j));
	 	                H.add((ArrayList<Integer>) boards.clone());
	 	                boards.clear();
	 	                j++;
	 	            }
	 	        }
	    	 return H;
	    }
	    @SuppressWarnings("unchecked")
		public static ArrayList<Integer> Remaining (ArrayList<Integer> L, ArrayList<ArrayList<Integer>> H, ArrayList<ArrayList<Integer>> pH) {
	       ArrayList<Integer> remaining = (ArrayList<Integer>) L.clone();
	    	 for (int i=0; i<H.size();i++) {
		            if (i!=0 && H.get(i).get(2).intValue()==H.get(i-1).get(2).intValue()&&remaining.size()>=2) {
		                if (remaining.contains(H.get(i).get(0))&& remaining.contains(H.get(i).get(1))) {
		                    remaining.remove(H.get(i).get(0));
		                    if (remaining.contains(H.get(i).get(1))) {
		                        pH.add(H.get(i));
		                        remaining.remove(H.get(i).get(1));
		                    }
		                    else {
		                        remaining.add(H.get(i).get(0));
		                    }
		                }
		            }
		            else if (i==0 || (i!=0 && remaining.size()!=0 && H.get(i).get(2)!=H.get(i-1).get(2))) {
		                pH.add(H.get(i));
		                remaining = (ArrayList<Integer>) L.clone();
		                remaining.remove(H.get(i).get(0));
		                remaining.remove(H.get(i).get(1));
		            }
		        }
	    	return remaining;
	    }
	    public static List<Integer> getFreqs (ArrayList<ArrayList<Integer>> pH, ArrayList<Integer> freq) {
	        int count = 1;
	        for (int i=0; i<pH.size();i++) {
	            if (i+1<pH.size()&&pH.get(i).get(2).intValue()==pH.get(i+1).get(2).intValue()) {
	                count++;
	                if ((i+1)==(pH.size()-1)) {
	                    freq.add(count);
	                    break;
	                }
	            }
	            else {
	                freq.add(count);
	                count=1;
	            }
	        }
	    	return freq;
	    }
	    public static void getAns (ArrayList<Integer> freq, int[] Ans) {
	    	int maxfreq = 0;
	    	int diffmax = 0;
	        for (int i=0;i<freq.size();i++) {
	            if (freq.get(i)>maxfreq) {
	                maxfreq = freq.get(i);
	                diffmax = 1;
	            }
	            else if (freq.get(i)==maxfreq)
	                diffmax++;
	        }
	        Ans[0] = maxfreq;
	        Ans[1] = diffmax;
	    }
	    public static void main(String[] args) throws IOException {
	        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
	        int N = Integer.parseInt(in.readLine());
	        String[] tmp = new String[1000001];
	        ArrayList<Integer> L = new ArrayList<Integer>();
	        addList(tmp, N, L);
	        ArrayList<ArrayList<Integer>> H = new ArrayList<ArrayList<Integer>>();
	        ArrayList<Integer> boards = new ArrayList<Integer>();
	        Boards(boards, H, L);
	        Collections.sort(H, new Comparator<List<Integer>>() {
	            @Override
	            public int compare(List<Integer> o1, List<Integer> o2) {
	                return o1.get(2).compareTo(o2.get(2));
	            }
	        });
	        ArrayList<ArrayList<Integer>> pH = new ArrayList<ArrayList<Integer>>();
	        Remaining(L, H, pH);
	        ArrayList<Integer> freq = new ArrayList<Integer>();
	        getFreqs(pH, freq);
	        int[] Ans = new int[2];
	        getAns(freq, Ans);
          System.out.println(Ans[0]+" "+Ans[1]);
	    }
	}
